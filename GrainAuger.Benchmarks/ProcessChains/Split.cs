// <auto-generated/>
#nullable enable

using Microsoft.Extensions.Logging;

namespace GrainAuger.Benchmarks.ProcessChains;

/*
Found Dag for job SplitJob:
Foreign Source <int> -> input1
input1 -[GrainAuger.Benchmarks.ProcessChains.PassProcessor]-> split1
split1 -[GrainAuger.Benchmarks.ProcessChains.PassProcessor]-> split2
*/

/* 
Found constructors:
GrainAuger.Benchmarks.ProcessChains.PassProcessor.PassProcessor(Orleans.Streams.IAsyncObserver<int>)
GrainAuger.Benchmarks.ProcessChains.PassProcessor.PassProcessor(Orleans.Streams.IAsyncObserver<int>)
*/

[global::Orleans.ImplicitStreamSubscription("InputSplit")]
public class split1(
    global::Microsoft.Extensions.Logging.ILogger<split1> logger) :
    global::Orleans.Grain,
    global::Orleans.IGrainWithStringKey,
    global::Orleans.Streams.IAsyncObserver<global::System.Int32>
{
    private global::Orleans.Streams.IAsyncStream<global::System.Int32> _outputStream = null!;
    private global::GrainAuger.Benchmarks.ProcessChains.PassProcessor _processor0 = null!;
    
    public override async Task OnActivateAsync(CancellationToken cancellationToken)
    {
        logger.LogInformation("Activating...");
        
        await base.OnActivateAsync(cancellationToken);
        
        var inputStreamProvider = this.GetStreamProvider("Memory");
        var inputStreamId = global::Orleans.Runtime.StreamId.Create("InputSplit", this.GetPrimaryKeyString());
        var inputStream = inputStreamProvider.GetStream<global::System.Int32>(inputStreamId);
        
        var outputStreamProvider = this.GetStreamProvider("Memory");
        var outputStreamId = global::Orleans.Runtime.StreamId.Create("Split1", this.GetPrimaryKeyString());
        _outputStream = outputStreamProvider.GetStream<global::System.Int32>(outputStreamId);
        
        _processor0 = new global::GrainAuger.Benchmarks.ProcessChains.PassProcessor(_outputStream);
        
        await inputStream.SubscribeAsync(this);
        
        logger.LogInformation("Activated");
    }
    
    public async Task OnNextAsync(global::System.Int32 item, global::Orleans.Streams.StreamSequenceToken? token = null)
    {
        if (logger.IsEnabled(Microsoft.Extensions.Logging.LogLevel.Information))
            logger.LogInformation("Processing {item}", item);
        await _processor0.OnNextAsync(item, token);                
    }
    
    public async Task OnCompletedAsync()
    {
        await _processor0.OnCompletedAsync();
    }
    
    public async Task OnErrorAsync(Exception ex)
    {
        logger.LogError(ex, "Error occurred");
        await _processor0.OnErrorAsync(ex);
    }
}

[global::Orleans.ImplicitStreamSubscription("Split1")]
public class split2(
    global::Microsoft.Extensions.Logging.ILogger<split2> logger) :
    global::Orleans.Grain,
    global::Orleans.IGrainWithStringKey,
    global::Orleans.Streams.IAsyncObserver<global::System.Int32>
{
    private global::Orleans.Streams.IAsyncStream<global::System.Int32> _outputStream = null!;
    private global::GrainAuger.Benchmarks.ProcessChains.PassProcessor _processor0 = null!;
    
    public override async Task OnActivateAsync(CancellationToken cancellationToken)
    {
        logger.LogInformation("Activating...");
        
        await base.OnActivateAsync(cancellationToken);
        
        var inputStreamProvider = this.GetStreamProvider("Memory");
        var inputStreamId = global::Orleans.Runtime.StreamId.Create("Split1", this.GetPrimaryKeyString());
        var inputStream = inputStreamProvider.GetStream<global::System.Int32>(inputStreamId);
        
        var outputStreamProvider = this.GetStreamProvider("Memory");
        var outputStreamId = global::Orleans.Runtime.StreamId.Create("Split2", this.GetPrimaryKeyString());
        _outputStream = outputStreamProvider.GetStream<global::System.Int32>(outputStreamId);
        
        _processor0 = new global::GrainAuger.Benchmarks.ProcessChains.PassProcessor(_outputStream);
        
        await inputStream.SubscribeAsync(this);
        
        logger.LogInformation("Activated");
    }
    
    public async Task OnNextAsync(global::System.Int32 item, global::Orleans.Streams.StreamSequenceToken? token = null)
    {
        if (logger.IsEnabled(Microsoft.Extensions.Logging.LogLevel.Information))
            logger.LogInformation("Processing {item}", item);
        await _processor0.OnNextAsync(item, token);                
    }
    
    public async Task OnCompletedAsync()
    {
        await _processor0.OnCompletedAsync();
    }
    
    public async Task OnErrorAsync(Exception ex)
    {
        logger.LogError(ex, "Error occurred");
        await _processor0.OnErrorAsync(ex);
    }
}